generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                      String           @id @default(uuid())
  username                String           @unique
  hashedPassword          String
  email                   String           @unique
  emailVerified           Boolean          @default(false)
  avatarUrl               String           @default("https://placehold.co/100x100/orange/white?text=avatar")
  status                  Status           @default(STANDARD)
  role                    UserRole         @default(USER)
  registeredAt            DateTime         @default(now())
  communitiesOwned        Community[]
  emailTokens             EmailToken[]
  communitiesParticipated User_Community[]
  Post                    Post[]
  Vote                    Vote[]
}

model EmailToken {
  id        String   @id @default(uuid())
  userId    String
  token     String
  expireAt  DateTime
  createdAt DateTime @default(now())
  User      User     @relation(fields: [userId], references: [id])
}

model Community {
  id          String           @id @default(uuid())
  name        String           @unique
  ownerId     String
  description String
  logoUrl     String           @default("https://placehold.co/100x100/pink/white?text=logo")
  bannerUrl   String           @default("https://placehold.co/100x100/pink/white?text=banner")
  status      Status           @default(STANDARD)
  memberCount Int              @default(0)
  createdAt   DateTime         @default(now())
  User        User             @relation(fields: [ownerId], references: [id])
  user        User_Community[]
}

model User_Community {
  userId        String
  communityId   String
  communityRole CommunityRole @default(MEMBER)
  banned        Boolean       @default(false)
  community     Community     @relation(fields: [communityId], references: [id], onDelete: Cascade)
  user          User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, communityId])
}

model Post {
  id            String   @id @default(uuid())
  type          PostType
  title         String
  content       String
  mediaUrls     String[]
  author        User     @relation(fields: [authorName], references: [username])
  authorName    String
  communityName String
  deleted       Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  score         Int      @default(0)
  Vote          Vote[]
}

model Vote {
  user     User      @relation(fields: [username], references: [username])
  username String
  post     Post      @relation(fields: [postId], references: [id])
  postId   String
  state    VoteState

  @@id([username, postId])
}

enum UserRole {
  USER
  ADMIN
}

enum CommunityRole {
  MEMBER
  MODERATOR
}

enum Status {
  STANDARD
  SUSPENDED
}

enum PostType {
  TEXT
  LINK
  MEDIA
}

enum VoteState {
  UPVOTE
  DOWNVOTE
}
